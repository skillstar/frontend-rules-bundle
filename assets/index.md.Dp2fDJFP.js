import{_ as e,c as r,o as a,ag as n}from"./chunks/framework.Ct9Y0U6u.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{"layout":"home","home":true,"hero":{"name":"FRB","text":"前端编码规范工程化","tagline":"FRB是一个用来标准化前端开发、确保代码质量和提高团队协作的工具包","actions":[{"theme":"brand","text":"立刻进入 →","link":"/coding/html.md"}]},"features":[{"icon":"🐬","title":"完善的规范生态","details":"支持对全部前端配置实现一键接入、一键扫描、一键修复、一键升级"},{"icon":"🤸‍","title":"支持 Typescript","details":"提供完整的类型注释，帮助您从 0~1 掌握完整的前端规范化"},{"icon":"🧩","title":"完整的测试用例","details":"配套完整的测试用例，帮助您提升项目健壮性"}]},"headers":[],"relativePath":"index.md","filePath":"index.md"}'),o={name:"index.md"};function i(l,t,d,c,s,p){return a(),r("div",null,t[0]||(t[0]=[n('<h2 id="设计目的" tabindex="-1">⭐ 设计目的 <a class="header-anchor" href="#设计目的" aria-label="Permalink to &quot;:star: 设计目的&quot;">​</a></h2><p>随着前端技术的发展，前端项目愈发复杂。<code>JavaScript</code> 作为弱类型解释性语言，灵活多变的语法提升了开发效率，但也带来了许多问题。大型项目中，代码维护时间往往超过新功能开发。因此，编写符合团队规范的代码至关重要。</p><p>一致的代码规范能提高团队协作效率、提升代码质量、减少系统维护负担。然而，团队成员的编码风格各异，一个普适的标准是必不可少的。</p><p>制定并推广前端团队的代码规范是前端架构师的挑战。许多团队虽然了解部分规范工具，但缺乏完整的工程化方案来落实规范。如果能产出一套完整的前端编码规范工具，不仅能解决现有项目的问题，还能确保后续项目的高质量。</p><h2 id="配套工具" tabindex="-1">🛋️ 配套工具 <a class="header-anchor" href="#配套工具" aria-label="Permalink to &quot;:couch_and_lamp: 配套工具&quot;">​</a></h2><p>我们引入了多个业界流行的 <code>Linter</code> 作为规约文档的配套工具，并根据规约内容定制了对应的规则包，它们包括：</p><table tabindex="0"><thead><tr><th>规约</th><th>Lint 工具</th><th>NPM包</th></tr></thead><tbody><tr><td>JavaScript 编码规范 <br> TypeScript 编码规范 <br> Node 编码规范</td><td><a href="https://eslint.org/" target="_blank" rel="noreferrer">ESLint</a></td><td><a href="https://www.npmjs.com/package/frb-eslint-config" target="_blank" rel="noreferrer">frb-eslint-config</a></td></tr><tr><td>CSS 编码规范</td><td><a href="https://stylelint.io/" target="_blank" rel="noreferrer">stylelint</a></td><td><a href="https://www.npmjs.com/package/frb-stylelint-config" target="_blank" rel="noreferrer">frb-stylelint-config</a></td></tr><tr><td>Git 规范</td><td><a href="https://commitlint.js.org/#/" target="_blank" rel="noreferrer">commitlint</a></td><td><a href="https://www.npmjs.com/package/frb-commitlint-config" target="_blank" rel="noreferrer">frb-commitlint-config</a></td></tr><tr><td>文档规范</td><td><a href="https://github.com/DavidAnson/markdownlint" target="_blank" rel="noreferrer">markdownlint</a></td><td><a href="https://www.npmjs.com/package/frb-markdownlint-config" target="_blank" rel="noreferrer">frb-markdownlint-config</a></td></tr></tbody></table><p><a href="https://www.npmjs.com/package/frb-spec-cli" target="_blank" rel="noreferrer">frb-spec-cli</a> 收敛屏蔽了上述依赖和配置细节，提供简单的 <code>CLI</code> 和 <code>Node.js API</code>，让项目能够一键接入、一键扫描、一键修复、一键升级，并为项目配置 git commit 卡口，降低项目接入规约的成本。</p><p>您可以使用<a href="https://www.npmjs.com/package/frb-spec-cli" target="_blank" rel="noreferrer">frb-spec-cli</a> 方便地为项目接入全部规范。</p>',9)]))}const m=e(o,[["render",i]]);export{h as __pageData,m as default};
